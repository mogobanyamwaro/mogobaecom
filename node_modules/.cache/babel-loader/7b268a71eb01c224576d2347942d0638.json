{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAIL, UPDATE_PROFILE_REQUEST, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAIL, UPDATE_PASSWORD_REQUEST, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_FAIL, NEW_PASSWORD_REQUEST, NEW_PASSWORD_SUCCESS, NEW_PASSWORD_FAIL, ALL_USERS_REQUEST, ALL_USERS_SUCCESS, ALL_USERS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, UPDATE_USER_FAIL, DELETE_USER_REQUEST, DELETE_USER_SUCCESS, DELETE_USER_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, CLEAR_ERRORS } from '../constants/userConstants'; // Login\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Register user\n\nexport const register = userData => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/register', userData, config);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Load user\n\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/me');\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update profile\n\nexport const updateProfile = userData => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PROFILE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/me/update', userData, config);\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update password\n\nexport const updatePassword = passwords => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/password/update', passwords, config);\n    dispatch({\n      type: UPDATE_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Forgot password\n\nexport const forgotPassword = email => async dispatch => {\n  try {\n    dispatch({\n      type: FORGOT_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/password/forgot', email, config);\n    dispatch({\n      type: FORGOT_PASSWORD_SUCCESS,\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Reset password\n\nexport const resetPassword = (token, passwords) => async dispatch => {\n  try {\n    dispatch({\n      type: NEW_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/password/reset/${token}`, passwords, config);\n    dispatch({\n      type: NEW_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Logout user\n\nexport const logout = () => async dispatch => {\n  try {\n    await axios.get('/api/v1/logout');\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGOUT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get all users\n\nexport const allUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_USERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/admin/users');\n    dispatch({\n      type: ALL_USERS_SUCCESS,\n      payload: data.users\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_USERS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update user - ADMIN\n\nexport const updateUser = (id, userData) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/admin/user/${id}`, userData, config);\n    dispatch({\n      type: UPDATE_USER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get user details - ADMIN\n\nexport const getUserDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/admin/user/${id}`);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Delete user - ADMIN\n\nexport const deleteUser = id => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.delete(`/api/v1/admin/user/${id}`);\n    dispatch({\n      type: DELETE_USER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Clear Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["/home/douglas/Pictures/deploy ecommerce to aws/frontend/src/actions/userActions.js"],"names":["axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAIL","UPDATE_PROFILE_REQUEST","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAIL","UPDATE_PASSWORD_REQUEST","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_FAIL","NEW_PASSWORD_REQUEST","NEW_PASSWORD_SUCCESS","NEW_PASSWORD_FAIL","ALL_USERS_REQUEST","ALL_USERS_SUCCESS","ALL_USERS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","DELETE_USER_REQUEST","DELETE_USER_SUCCESS","DELETE_USER_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","CLEAR_ERRORS","login","email","password","dispatch","type","config","headers","data","post","payload","user","error","response","message","register","userData","loadUser","get","updateProfile","put","success","updatePassword","passwords","forgotPassword","resetPassword","token","logout","allUsers","users","updateUser","id","getUserDetails","deleteUser","delete","clearErrors"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n  LOGIN_REQUEST,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  REGISTER_USER_REQUEST,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_FAIL,\n  LOAD_USER_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOAD_USER_FAIL,\n  UPDATE_PROFILE_REQUEST,\n  UPDATE_PROFILE_SUCCESS,\n  UPDATE_PROFILE_FAIL,\n  UPDATE_PASSWORD_REQUEST,\n  UPDATE_PASSWORD_SUCCESS,\n  UPDATE_PASSWORD_FAIL,\n  FORGOT_PASSWORD_REQUEST,\n  FORGOT_PASSWORD_SUCCESS,\n  FORGOT_PASSWORD_FAIL,\n  NEW_PASSWORD_REQUEST,\n  NEW_PASSWORD_SUCCESS,\n  NEW_PASSWORD_FAIL,\n  ALL_USERS_REQUEST,\n  ALL_USERS_SUCCESS,\n  ALL_USERS_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_FAIL,\n  UPDATE_USER_REQUEST,\n  UPDATE_USER_SUCCESS,\n  UPDATE_USER_FAIL,\n  DELETE_USER_REQUEST,\n  DELETE_USER_SUCCESS,\n  DELETE_USER_FAIL,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAIL,\n  CLEAR_ERRORS,\n} from '../constants/userConstants';\n\n// Login\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({ type: LOGIN_REQUEST });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const { data } = await axios.post(\n      '/api/v1/login',\n      { email, password },\n      config\n    );\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user,\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Register user\nexport const register = (userData) => async (dispatch) => {\n  try {\n    dispatch({ type: REGISTER_USER_REQUEST });\n\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    };\n\n    const { data } = await axios.post('/api/v1/register', userData, config);\n\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: data.user,\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Load user\nexport const loadUser = () => async (dispatch) => {\n  try {\n    dispatch({ type: LOAD_USER_REQUEST });\n\n    const { data } = await axios.get('/api/v1/me');\n\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user,\n    });\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Update profile\nexport const updateProfile = (userData) => async (dispatch) => {\n  try {\n    dispatch({ type: UPDATE_PROFILE_REQUEST });\n\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    };\n\n    const { data } = await axios.put('/api/v1/me/update', userData, config);\n\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data.success,\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Update password\nexport const updatePassword = (passwords) => async (dispatch) => {\n  try {\n    dispatch({ type: UPDATE_PASSWORD_REQUEST });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const { data } = await axios.put(\n      '/api/v1/password/update',\n      passwords,\n      config\n    );\n\n    dispatch({\n      type: UPDATE_PASSWORD_SUCCESS,\n      payload: data.success,\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PASSWORD_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Forgot password\nexport const forgotPassword = (email) => async (dispatch) => {\n  try {\n    dispatch({ type: FORGOT_PASSWORD_REQUEST });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const { data } = await axios.post('/api/v1/password/forgot', email, config);\n\n    dispatch({\n      type: FORGOT_PASSWORD_SUCCESS,\n      payload: data.message,\n    });\n  } catch (error) {\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Reset password\nexport const resetPassword = (token, passwords) => async (dispatch) => {\n  try {\n    dispatch({ type: NEW_PASSWORD_REQUEST });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const { data } = await axios.put(\n      `/api/v1/password/reset/${token}`,\n      passwords,\n      config\n    );\n\n    dispatch({\n      type: NEW_PASSWORD_SUCCESS,\n      payload: data.success,\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_PASSWORD_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Logout user\nexport const logout = () => async (dispatch) => {\n  try {\n    await axios.get('/api/v1/logout');\n\n    dispatch({\n      type: LOGOUT_SUCCESS,\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGOUT_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Get all users\nexport const allUsers = () => async (dispatch) => {\n  try {\n    dispatch({ type: ALL_USERS_REQUEST });\n\n    const { data } = await axios.get('/api/v1/admin/users');\n\n    dispatch({\n      type: ALL_USERS_SUCCESS,\n      payload: data.users,\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_USERS_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Update user - ADMIN\nexport const updateUser = (id, userData) => async (dispatch) => {\n  try {\n    dispatch({ type: UPDATE_USER_REQUEST });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const { data } = await axios.put(\n      `/api/v1/admin/user/${id}`,\n      userData,\n      config\n    );\n\n    dispatch({\n      type: UPDATE_USER_SUCCESS,\n      payload: data.success,\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USER_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Get user details - ADMIN\nexport const getUserDetails = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_DETAILS_REQUEST });\n\n    const { data } = await axios.get(`/api/v1/admin/user/${id}`);\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data.user,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Delete user - ADMIN\nexport const deleteUser = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: DELETE_USER_REQUEST });\n\n    const { data } = await axios.delete(`/api/v1/admin/user/${id}`);\n\n    dispatch({\n      type: DELETE_USER_SUCCESS,\n      payload: data.success,\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_USER_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Clear Errors\nexport const clearErrors = () => async (dispatch) => {\n  dispatch({\n    type: CLEAR_ERRORS,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}