{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productsReducer, newProductReducer, productReducer, productDetailsReducer, newReviewReducer, productReviewsReducer, reviewReducer } from './reducers/productReducers';\nimport { authReducer, userReducer, forgotPasswordReducer, allUsersReducer, userDetailsReducer } from './reducers/userReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { newOrderReducer, myOrdersReducer, orderDetailsReducer, allOrdersReducer, orderReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  products: productsReducer,\n  productDetails: productDetailsReducer,\n  newProduct: newProductReducer,\n  product: productReducer,\n  productReviews: productReviewsReducer,\n  review: reviewReducer,\n  auth: authReducer,\n  user: userReducer,\n  allUsers: allUsersReducer,\n  userDetails: userDetailsReducer,\n  forgotPassword: forgotPasswordReducer,\n  cart: cartReducer,\n  newOrder: newOrderReducer,\n  myOrders: myOrdersReducer,\n  allOrders: allOrdersReducer,\n  orderDetails: orderDetailsReducer,\n  order: orderReducer,\n  newReview: newReviewReducer\n});\nlet initialState = {\n  cart: {\n    cartItems: localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [],\n    shippingInfo: localStorage.getItem('shippingInfo') ? JSON.parse(localStorage.getItem('shippingInfo')) : {}\n  }\n};\nconst middlware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middlware)));\nexport default store;","map":{"version":3,"sources":["/home/douglas/Music/ProShop/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productsReducer","newProductReducer","productReducer","productDetailsReducer","newReviewReducer","productReviewsReducer","reviewReducer","authReducer","userReducer","forgotPasswordReducer","allUsersReducer","userDetailsReducer","cartReducer","newOrderReducer","myOrdersReducer","orderDetailsReducer","allOrdersReducer","orderReducer","reducer","products","productDetails","newProduct","product","productReviews","review","auth","user","allUsers","userDetails","forgotPassword","cart","newOrder","myOrders","allOrders","orderDetails","order","newReview","initialState","cartItems","localStorage","getItem","JSON","parse","shippingInfo","middlware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,SACEC,eADF,EAEEC,iBAFF,EAGEC,cAHF,EAIEC,qBAJF,EAKEC,gBALF,EAMEC,qBANF,EAOEC,aAPF,QAQO,4BARP;AASA,SACEC,WADF,EAEEC,WAFF,EAGEC,qBAHF,EAIEC,eAJF,EAKEC,kBALF,QAMO,yBANP;AAOA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,YALF,QAMO,0BANP;AAQA,MAAMC,OAAO,GAAGtB,eAAe,CAAC;AAC9BuB,EAAAA,QAAQ,EAAEnB,eADoB;AAE9BoB,EAAAA,cAAc,EAAEjB,qBAFc;AAG9BkB,EAAAA,UAAU,EAAEpB,iBAHkB;AAI9BqB,EAAAA,OAAO,EAAEpB,cAJqB;AAK9BqB,EAAAA,cAAc,EAAElB,qBALc;AAM9BmB,EAAAA,MAAM,EAAElB,aANsB;AAO9BmB,EAAAA,IAAI,EAAElB,WAPwB;AAQ9BmB,EAAAA,IAAI,EAAElB,WARwB;AAS9BmB,EAAAA,QAAQ,EAAEjB,eAToB;AAU9BkB,EAAAA,WAAW,EAAEjB,kBAViB;AAW9BkB,EAAAA,cAAc,EAAEpB,qBAXc;AAY9BqB,EAAAA,IAAI,EAAElB,WAZwB;AAa9BmB,EAAAA,QAAQ,EAAElB,eAboB;AAc9BmB,EAAAA,QAAQ,EAAElB,eAdoB;AAe9BmB,EAAAA,SAAS,EAAEjB,gBAfmB;AAgB9BkB,EAAAA,YAAY,EAAEnB,mBAhBgB;AAiB9BoB,EAAAA,KAAK,EAAElB,YAjBuB;AAkB9BmB,EAAAA,SAAS,EAAEhC;AAlBmB,CAAD,CAA/B;AAqBA,IAAIiC,YAAY,GAAG;AACjBP,EAAAA,IAAI,EAAE;AACJQ,IAAAA,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACPC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADO,GAEP,EAHA;AAIJG,IAAAA,YAAY,EAAEJ,YAAY,CAACC,OAAb,CAAqB,cAArB,IACVC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CADU,GAEV;AANA;AADW,CAAnB;AAWA,MAAMI,SAAS,GAAG,CAAC9C,KAAD,CAAlB;AACA,MAAM+C,KAAK,GAAGlD,WAAW,CACvBuB,OADuB,EAEvBmB,YAFuB,EAGvBtC,mBAAmB,CAACF,eAAe,CAAC,GAAG+C,SAAJ,CAAhB,CAHI,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport {\n  productsReducer,\n  newProductReducer,\n  productReducer,\n  productDetailsReducer,\n  newReviewReducer,\n  productReviewsReducer,\n  reviewReducer,\n} from './reducers/productReducers';\nimport {\n  authReducer,\n  userReducer,\n  forgotPasswordReducer,\n  allUsersReducer,\n  userDetailsReducer,\n} from './reducers/userReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport {\n  newOrderReducer,\n  myOrdersReducer,\n  orderDetailsReducer,\n  allOrdersReducer,\n  orderReducer,\n} from './reducers/orderReducers';\n\nconst reducer = combineReducers({\n  products: productsReducer,\n  productDetails: productDetailsReducer,\n  newProduct: newProductReducer,\n  product: productReducer,\n  productReviews: productReviewsReducer,\n  review: reviewReducer,\n  auth: authReducer,\n  user: userReducer,\n  allUsers: allUsersReducer,\n  userDetails: userDetailsReducer,\n  forgotPassword: forgotPasswordReducer,\n  cart: cartReducer,\n  newOrder: newOrderReducer,\n  myOrders: myOrdersReducer,\n  allOrders: allOrdersReducer,\n  orderDetails: orderDetailsReducer,\n  order: orderReducer,\n  newReview: newReviewReducer,\n});\n\nlet initialState = {\n  cart: {\n    cartItems: localStorage.getItem('cartItems')\n      ? JSON.parse(localStorage.getItem('cartItems'))\n      : [],\n    shippingInfo: localStorage.getItem('shippingInfo')\n      ? JSON.parse(localStorage.getItem('shippingInfo'))\n      : {},\n  },\n};\n\nconst middlware = [thunk];\nconst store = createStore(\n  reducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middlware))\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}